                    Tor Fallback Directory List Format
                         Tim Wilson-Brown (teor)

1. Scope and Preliminaries

   This document describes the format of Tor's fallback directory list,
   which is compiled and hard-coded into the tor binary. The list is
   also parsed by other libraries, like stem and metrics-lib.

   This list was first introduced in proposal 210. The FallbackDir
   feature was first supported by Tor in Tor version 0.2.4.7-alpha, and
   the first hard-coded list was shipped in 0.2.8.1-alpha.

   The hard-coded list is located in the tor source repository at:

       src/or/fallback_dirs.inc

   This document describes version 2.0.0 and later of the fallback
   directory file format. Legacy, unstructured versions of the fallback
   list were released with Tor 0.2.8.1-alpha through Tor 0.3.1.9.

1.1. Format Overview

   The fallback directory list is a C code fragment containing an array of
   C string constants. Each string constant is a valid torrc FallbackDir
   line, containing various data fields. The array's declaration and
   terminating NULL are not in the list. (They are part of the
   #include-ing file, config.c.)

   The fallback C string constants may be split over multiple lines for
   readability. The file also includes C-style comments and whitespace.
   The presence of whitespace is significant, the amount or type of
   whitespace is not.

   Structured C-style comments are used to provide additional data fields.
   This information is not used by Tor, but may be of interest to other
   libraries.

   The order of fallbacks and data fields is not significant, except when
   noted below.

2. Format Details

   The fallback file consists of several sections, separated by the C comment:

     "/* ===== */"

   The file contains the following sections:
     - File Header (exactly once)
     - Fallback Summary (exactly once, may be empty)
     - Fallback Entry (zero or more times)

2.1. File Header

   The file header consists of the following key=value pairs, one per line,
   contained in one C-style comment per line:

     "type=fallback"

       [At start, exactly once.]

       A description of the type of the file. Parsers SHOULD exit with an
       error if this is not the first line of the file, or if the value is
       anything other than "fallback".

     "version=" version_number

       [Exactly once, in second position in document.]

       The version of the fallback file format. version_number uses
       semantic versioning: https://semver.org

       In particular:
         * major versions are used for incompatible changes, like
           removing non-optional fields
         * minor versions are used for compatible changes, like adding
           fields
         * patch versions are for bug fixes, like fixing an
           incorrectly-formatted Summary item

       Version 1.0.0 represents the undocumented, legacy file format.
       Version 2.0.0 and later are documented by this specification.

   Future releases may include additional header fields. Parsers MUST NOT
   rely on the order of these additional fields. Additional header fields
   will be accompanied by a minor version increment.

   The file header ends with the section separator.

2.2. Fallback Summary

   The fallback summary consists of human-readable prose describing the
   content and origin of this fallback file. It is contained in zero or
   more C-style comments, and may contain multi-line comments and
   uncommented C code.

   It SHOULD be ignored by parsers. Parsers MUST NOT rely on format of
   this section, except that it will never be a valid fallback entry.

   In particular, this section may contain C-style comments that contain
   an equals ("=") character. It may also be entirely empty.

   Future releases may arbitrarily change the content of this section.
   Parsers MUST NOT rely on a version increment when the format changes.

   The fallback summary ends with the section separator. (Parsers MAY
   rely on the section separator.)

2.3. Fallback Entry

   A fallback entry consists of a C string constant, and one or more
   C-style comments. The C string constant is a valid argument to the
   FallbackDir torrc option. The string constant and comments contain the
   following data fields:

     ipv4_address ":" dir_port

       [At start of C string, exactly once.]

       The IPv4 address of the FallbackDir in dotted-quad notation,
       followed by the IPv4 DirPort of the FallbackDir. In this format
       version, all IPv4 addresses and DirPorts are guaranteed to be
       non-zero.

       If a fallback entry does not contain a C string constant, or if it
       contains a C string constant inside a C comment, the entry SHOULD be
       ignored.

     "orport=" or_port

       [Exactly once.]

       The IPv4 ORPort of the FallbackDir. In this format version, all
       IPv4 ORPorts are guaranteed to be non-zero.

     "id=" fingerprint

       [Exactly once.]

       The relay fingerprint of the FallbackDir. A fingerprint has the
       same definition as hexdigest in dir-spec.txt, section
       "2.1.3. Nonterminals in server descriptors", but it does not
       start with "$".

     "weight=" number

       [Zero or more times.]

       A non-negative decimal floating-point weight for this FallbackDir.
       The default fallback weight is 1.0, and the default
       DirAuthorityFallbackRate is 1.0 or 0.1, depending on the Tor
       version.

     "ipv6=[" ipv6_address "]:" ipv6_or_port

       [Zero or more times.]

       The IPv6 address and ORPort for this FallbackDir. If present,
       IPv6 addresses and ORPorts are guaranteed to be non-zero.

     "nickname=" nickname

       [Zero or more times.]

       The nickname for this FallbackDir. This has the same definition as
       nickname in dir-spec.txt, section
       "2.1.3. Nonterminals in server descriptors". The transitional 2.0.0
       format has zero-length nicknames.

     "extrainfo=" caches_extra_info_flag

       [Zero or more times.]

       An integer flag that indicates whether this fallback caches
       extra-info documents. Set to 1 if the fallback claimed that it
       cached extra-info documents in its descriptor when the list was
       created. 0 indicates that it did not, or its descriptor was not
       available.

   Parsers SHOULD NOT rely on particular data fields occuring in the C
   string constant or C-style comments, except where indicated.

   Future releases may include additional data fields in the string constant
   or comments. Parsers MUST NOT rely on the order of these additional
   fields. Additional data fields will be accompanied by a minor version
   increment.

   Each fallback entry ends with the section separator, and a comma, which
   terminates the C string constant.

   The list of fallback entries does not include the directory authorities.

3. Usage Considerations

3.1. Caching

   The fallback list typically changes once every 6-12 months. The data in
   the list represents the state of the fallback directory entries when the
   list was created. Fallbacks can and do change their details over time.

   Libraries SHOULD parse and cache the most recent version of the list
   during their build or release processes. Libraries MUST NOT retrieve the
   list every time they are deployed or executed.

   The latest fallback list can be retrieved from:

     https://gitweb.torproject.org/tor.git/plain/src/or/fallback_dirs.inc

   Libraries MUST NOT rely on the availability of the server that hosts
   this list.

3.2. Reliability

   The fallback list is typically regenerated when the fallback failure
   rate exceeds 25%. Libraries SHOULD NOT rely on any particular fallback
   being available, or some proportion of fallbacks being available.

   Libraries that require high-uptime availablility of Tor directory
   information should investigate the following options:
     * OnionOO: https://metrics.torproject.org/onionoo.html
     * CollecTor: https://collector.torproject.org/
   
   Some libraries retrieve directory documents directly from the Tor
   Directory Authorities. Libraries SHOULD consider the potential load on
   the authorities, and whether other sources, including fallbacks, can meet
   their needs.

A.1. Sample Data

   A sample version 2.0.0 file is available here:

     https://trac.torproject.org/projects/tor/raw-attachment/ticket/22759/fallback_dirs_new_format_version.3.inc

   A sample transitional version 2.0.0 file is available here:

     https://raw.githubusercontent.com/teor2345/tor/fallback-format-2-v2/src/or/fallback_dirs.inc

A.1.1. Sample File Header

   /* type=fallback */
   /* version=2.0.0 */
   /* ===== */

A.1.2. Sample Fallback Summary

   /* Whitelist & blacklist excluded 1326 of 1513 candidates. */
   /* Checked IPv4 DirPorts served a consensus within 15.0s. */
   /*
   Final Count: 151 (Eligible 187, Target 392 (1963 * 0.20), Max 200)
   Excluded: 36 (Same Operator 27, Failed/Skipped Download 9, Excess 0)
   Bandwidth Range: 1.3 - 40.0 MByte/s
   */
   /*
   Onionoo Source: details Date: 2017-05-16 07:00:00 Version: 4.0
   URL: https:onionoo.torproject.orgdetails?fields=fingerprint%2Cnickname%2Ccontact%2Clast_changed_address_or_port%2Cconsensus_weight%2Cadvertised_bandwidth%2Cor_addresses%2Cdir_address%2Crecommended_version%2Cflags%2Ceffective_family%2Cplatform&flag=V2Dir&type=relay&last_seen_days=-0&first_seen_days=30-
   */
   /*
   Onionoo Source: uptime Date: 2017-05-16 07:00:00 Version: 4.0
   URL: https:onionoo.torproject.orguptime?first_seen_days=30-&flag=V2Dir&type=relay&last_seen_days=-0
   */
   /* ===== */

A.1.3. Sample Fallback Entries

   "176.10.104.240:80 orport=443 id=0111BA9B604669E636FFD5B503F382A4B7AD6E80"
   /* nickname=foo */
   /* extrainfo=1 */
   /* ===== */
   ,
   "5.9.110.236:9030 orport=9001 id=0756B7CD4DFC8182BE23143FAC0642F515182CEB"
   " ipv6=[2a01:4f8:162:51e2::2]:9001"
   /* nickname= */
   /* extrainfo=0 */
   /* ===== */
   ,
